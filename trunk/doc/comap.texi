\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename comap.info
@settitle CoMap Manual 1.4.0
@afourpaper
@c %**end of header

@include version.texi

@copying
This is the manual of CoMap, version @value{VERSION}, @value{UPDATED}.

Copyright @copyright{} 2006, 2007, 2008, 2009, 2010 Julien Dutheil
@end copying

@titlepage
@title CoMap Manual
@author Julien Dutheil
@author @email{julien.dutheil@@univ-montp2.fr}

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1fill1
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top CoMap Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Introducing the CoMap program and this manual.                
* Data::                        How to import data into CoMap, file format, etc.                        
* Model::                       Markov model specification.                     
* Estimation::                  How to estimate parameters before an analysis.                 
* Mapping::                     Compute the substitution mapping.                   
* Pairwise::                    Performing the pairwise analysis of Dutheil et al. (2005).                 
* Clustering::                  Performing the clustering analysis of Dutheil et al. (2007).              
* Candidates::                  Candidate groups analysis (under development)
* Pvalue::                      Using the R scripts to compute p-values.                            

@end menu

@c ------------------------------------------------------------------------------------------------------------------

@node Introduction, Data, Top, Top
@chapter Introduction

CoMap performs two kinds of tasks:
@table @emph
@item (Weighted) Probabilistic substitution mapping
Compute all (weighted) number of substitutions occurring on each branch of a tree,
for each site of an alignment.

@item Co-evolution analysis
Using the substitution mapping, look for significantly groups of sites
departing the null hypothesis of independence.
Two kind of analyzes are provided: a pairwise analysis, presented in
Dutheil et al. (2005), and a clustering analysis in Dutheil and Galtier (2007).
In both cases, a parametric bootstrap approach is used to evaluate the
significance of groups. Simulation results are written to separate
files, a statistics software like R is required to look for the
significance.
For the clustering analysis, we provide R script to perform theses
computations.
No preliminary knowledge of the R language is required, although it is recommended.

@end table

CoMap is a command line program, written in C++ using the Bio++
libraries. It uses the Bio++ syntax, so that arguments may be passed
as parameter=value options, either directly to the command line or
using an option file. For more information about this very general syntax, please read the Bio++ Program Suite manual, available online at @uref{http://home.gna.org/bppsuite}. You can also download a PDF version here @uref{http://home.gna.org/bppsuite}.
Since it uses the Bio++ libraries, CoMap shares several options with the BppML program, to read sequences and specify models for instance.
We will only report the difference between CoMap and BppML in this manual. 

@c ------------------------------------------------------------------------------------------------------------------

@node Data, Model, Introduction, Top
@chapter Data loading

CoMap inputs two kinds of data: a sequence alignment file and a phylogenetic tree. The corresponding options are fully described in the Bio++ Program Suite manual.


@c ------------------------------------------------------------------------------------------------------------------

@node Model, Estimation, Data, Top
@chapter Model specification

CoMap support all substitution models available in Bio++, including non-homogeneous models. Options for specifying a model are described in full in the Bio++ Program Suite manual.

@c ------------------------------------------------------------------------------------------------------------------

@node Estimation, Mapping, Model, Top
@chapter Numerical parameters estimation

CoMap can (re-)estimate numerical parameters for you before any
analysis.
These parameters include
@itemize @bullet
@item
Branch lengths

@item
Entries of the substitution matrices, included base frequencies.
values)

@item
Parameters of the rate distribution (shape parameter of the gamma law, proportion of invariant sites).

@end itemize
The corresponding options are described in the Bio++ Program Suite manual.
Note however that CoMap do not perform topology estimation.
The tree topology will is considered to be know prior to the analysis.
The tree can however contain multifurcations (WARNING: not fully tested, please report any bug you may found!). 


@c ------------------------------------------------------------------------------------------------------------------

@node Mapping, Pairwise, Estimation, Top
@chapter Substitution mapping

Here come the CoMap specific part!
Options in this chapter are for the computation of substitution vectors.

@table @command

@item input.vectors.file = [[path]|none]
Restart an analysis by specifying the already computed vectors.
Otherwise, compute vectors using the following options.

@item nijt = [laplace|simple|aadist]
The kind of mapping to perform.
@option{laplace} option perform exact mapping, as in Dutheil et
al. (2005).
@option{simple} performs a naive mapping, as in Tufféry and Darlu
(2000).
@option{aadist} performs a weighted mapping, as in Dutheil and Galtier
(2007). Currently available only for proteins.

@item nijt_aadist.type = [grantham|miyata|grantham.volume|grantham.polarity|charge|klein.charge|user1|user2]
Specify the type of weight to use.
The @option{user1} option is for computing a simple distance from a AAIndex1 file, @option{user2} uses a AAIndex2 distance file.

@item nijt_aadist.type_user1.file = [path]
File path toward a AAIndex1 file.
Used only if @option{nijt_aadist.type=user1}.

@item nijt_aadist.type_user2.file = [path]
File path toward a AAIndex2 file.
Used only if @option{nijt_aadist.type=user2}.

@item nijt_aadist.sym = [boolean]
Tell if symmetric matrices must be used.
This option should be set to "no" for testing compensation.

@item output.vectors.file = [[path]|none]
Where to write the substitution mapping.

@end table

@section Optional commands

@table @command
@item nijt_laplace.trunc = [int>0]
Where to trunk the series when estimating exact number of
substitutions. A value of 10 should be fine.

@item nijt.average = [boolean]
Tell if mapping should be averaged over all ancestral states
(probabilistic mapping).
Otherwise use ancestral states reconstruction (naive mapping).
In most case, you should leave the default value (yes).
NB: only marginal ancestral state reconstruction is implemented. 

@item nijt.joint = [boolean]
Tell if joint probabilities are to be use, otherwise use marginal
probabilities.
This option is for method comparisons, a 'yes' value is suitable in
most cases.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Pairwise, Clustering, Mapping, Top
@chapter Pairwise analysis

@table @command

@item analysis = pairwise
Use this option for performing a pairwise analysis.
If another option or @option{none} is selected, no pairwise analysis is performed.

@item statistic = [correlation|compensation|cosubstitutions]
The coevolution statistic to use.
The @option{correlation} option is to be used in order to perform the MBE 2005 analysis.
Uses option @option{compensation} to perform a pairwise analysis with the compensation statistics introduced in the BMC Evol Biol 2007 paper.
You can also use the @option{cosubstitution} option to perform Tufféry & Darlu's MBE 2000 analysis.

@item statistic.output.file = [path]
Where to write the statistic value for each pair of sites.

@item statistic.null = [boolean]
Tell is the null distribution of the statistic must be computed, using
parametric bootstrap.
The number of simulations performed is the product of two numbers,
adjusting the amount of CPU and RAM to use.

@item statistic.null.nb_rep_CPU = [int>0]
Increase this parameter to take less memory (slow the program)

@item statistic.null.nb_rep_RAM = [int>0]
Increase this parameter to speed the program (need more memory)

@item statistic.null.output_file = [path]
Where to write the null distribution

@end table

@section Performing inter-gene comparisons

It is possible to compare all sites from one data set with all sites
from a second data set (inter-gene analysis).

@table @command

@item sequence.file2 = [[path]|none]
The path toward the second file. 
All previous options can be set up for second file, just append '2' at option names.
The default is to use options of file1 for file2.

@end table

@section Optional commands

@table @command
@item statistic.min = [float]
Write only pairs with a statistic greater or equal to this value.

@item statistic.min_rate = [float>0]
Write only pairs with a posterior rate greater or equal to this value.

@item statistic.min_rate_class = [int>0]
Write only pairs with a minimum rate class greater or equal to this
value (first class is 0).

@item statistic.max_rate_diff = [float]
Write only pairs with rates that do not differ more than this value  (-1 ->
write all pairs).

@item statistic.max_rate_class_diff = [int]
Write only pairs with rate classes that do not differ more than this
value (-1 -> write all pairs).

@item statistic.null.cumul = [bool]
[deprecated] Tell if an histogram of the distribution should be returned instead of
printing all simulated pairs.

@item statistic.null.lower = [float]
[deprecated] Lower bound of histogram.

@item statistic.null.upper = [float]
[deprecated] Upper bound of histogram.

@item statistic.null.nb_int = [int<0]
[deprecated] Number of intervals in histogram.

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Clustering, Candidates, Pairwise, Top
@chapter Clustering analysis

@table @command

@item analysis = clustering
Use this option for performing a clustering.
If another option or @option{none} is selected, no pairwise analysis is performed.

@item clustering.distance = [cor|euclidian|comp|none]
Distance to use: cor (correlation), euclidean, comp (compensation) or none (no clustering).

@item clustering.scale = [boolean]
Tell is mapping should be normalized (each row (=branch) will be
divided by its sum.

@item clustering.method = [complete]
Clustering algorithm: complete linkage. Other linkage types are available, but the complete one gives the better results.

@item clustering.output.matrix.file = [[path]|none]
Where to write the distance matrix (in phylip format).

@item clustering.output.tree.file = [[path]|none]
Where to write the clustering tree (newick format).

@item clustering.output.groups.file = [[path]|none]
Where to write the clusters (CSV format).

@item clustering.null = [boolean]
Tell if the null distribution of clusters must be computed.

@item clustering.null.number = [int>0]
Number of data sets to simulate.

@item clustering.null.output.file = [path]
Where to write the simulated clusters (CSV format).

@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Candidates, Pvalue, Clustering, Top
@chapter Candidate groups analysis

This method is used to test candidate groups of sites.
It perform a more powerful test by taking into account the precise rate of each site,
and no longer relies on the minimum rate of the group as in the pairwise or clustering method.
As a consequence, it is much slower, and should therefore only be used when some candidate groups are to be tested.
It can't be used in an exhaustive manner.

Important note: This method does not require the R scripts to be used! It directly outputs p-values :)

@table @command

@item candidates.input.file = @{path@}
The file to read. It must be in CSV-like format, with one group per line, and column names.
@item candidates.input.column_name = @{string@}
The name of the column that will contain groups. Groups should be described as [pos1;pos2;etc], refering to alignment positions, starting at 1.
@item candidates.input.column_sep = @{char@}
The character used to separate columns in the input file.
@item candidates.omega = @{float@}
The width of the window for telling whether two sites have similar rates or not. A value of 0.2 is usually good enough. The smaller the value, the more precise the computations, but the slower the execution time.
@item candidates.null.min = @{int>0@}
Minimum number of simulations to perform for each group.
@item candidates.null.nb_rep_RAM = @{int<0@}
Controles the number of sites to simulate at a time. The higher the value, the faster the execution, but at the expense of more memory usage.
@item candidates.null.verbose = @{int>=0@}
Controles the amount of output to terminal.
@item candidates.output.file = @{path@}
The file to write, identical to the input one but with extra columns, in CSV format.
@item candidates.output.column_sep = @{char@}
The column separator for output file.
@end table

@c ------------------------------------------------------------------------------------------------------------------

@node Pvalue,  , Candidates, Top
@chapter Output format and P-value computation

Apart from the candidate analysis, CoMap do not compute p-values from the simulation.
This goal is achieved by two R scripts, distributed along with the
program.
The reason for this is that there are different ways to compute p-values, depending on the null-hypothesis to test.
Getting the simulation result being the most expensive in terms of computer resources, I preferred to store them in files, and then play with R to get the p-values. It also allows to visualize the null-distribution and get more ``feeling'' about the data.

@section Output format

With the pairwise and clustering analysis, CoMap outputs two files, one for the real data, and one for simulations.
The two files are in the same format, a simple text file with columns separated by tabs. Each row stands for one group. The available columns are:

@table @command

@item Stat
Contains the value of the statistic for the group.

@item Nmin
Contains the minimum norm of the group.
The norm of the substitution vector is a general evolutionary rate measure (See Dutheil 2008, JME for more information). 

@end table

The output file for real data contains an additional column, @command{Group}, which describes the corresponding sites in the alignment.
It is a text string, beginning with ``['' and ending with ``]'', with site positions separated by semi-colons. Site numbering begins with 1, and is according to the original alignment, accounting for any gap or ignored positions in the analysis.

For the clustering analysis, the column @command{Size} also contains the size of the group, that is the number of sites, and the column @command{Dmax} contains the height of the supporting node in the clustering tree.
The simulation output for clustering also contains an additional column named @command{Rep} that contains the index of the simulated data set.

Additional columns, not used to compute p-values:

@table @command

@item RCmin
Contains the minimum rate class for the group. the number of classes depends on the option specified as input.

@item PRmin
Similar to @command{RCmin}, but with the posterior rate instead of the rate class.

@item Const
Tell if the group contains at least a totally conserved (=constant) site.

@end table

@section Available R scripts

The script @file{CoMapFunctions.R} contains several functions
performing the computation.
The script @file{computePValues.R} is the one to launch.
It calls the previous one, so they must be in the same directory.

Edit the first section of the @file{computePValues.R} so that is
matches your files, and then run it with the command
@cartouche
@example
R --vanilla < computePValues.R
@end example
@end cartouche

@c ------------------------------------------------------------------------------------------------------------------


@c ------------------------------------------------------------------------------------------------------------------
@c end of document

@c @node Index,  , Pvalue, Top
@c @unnumbered Index
@c
@c @printindex cp

@bye
